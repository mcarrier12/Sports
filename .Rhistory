add2 <- function(x, y) {
x + y
}
add2(3,5)
above <- function(x, n){
use <- x > n
x[use]
}
x <- 1:20
above (x)
above(x, 12)
above <- function(x, n = 10){
use <- x > n
x[use]
}
above(x)
columnmean <- function(y){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[, i])
}
means
}
columnmeans(airquality)
columnmeans<- function(y){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[, i])
}
means
}
columnmeans(airquality)
columnmeans<- function(y, removeNA = TRUE){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[, i], na.rm = removeNA)
}
means
}
columnmeans(airquality)
View(columnmeans)
swirl()
load("swirl")
library("swirl")
ls
rm(list=ls())
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect )
sum(flags$orange)
flag_colors <- flags[ , 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags [, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply (unique_vals, length)
sapply (unique_vals, length
)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character (1)
)
?tapply
table (flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
load("~/GitHub/Matt Github/SportsBS/SportsMisc/.RData")
head(duh)
getwd()
setwd("C:/Users/Matt Carrier/Documents/Github/Matt Github/Sports"
)
ls()
list.files()
wsh <- read.csv("wshskaters1617.csv")
wsh
heads(wsh)
head(wsh)
library(ggplot2)
tapply(wsh$GP, wsh$Position, mean)
gpbypos <- tapply(wsh$GP, wsh$Position, mean)
autoplot(gpbypos)
plot(gpbypos)
library(devtools)
install_github('sinhrks/ggfortify')
library(ggfortify); library(ggplot2)
data(iris)
iris.pca <- iris[c(1, 2, 3, 4)]
autoplot(prcomp(iris.pca))
library(ggfortify)
library (ggplot2)
install.packages("fortify")
install.packages(c("digest", "jsonlite", "stringr", "swirl"))
install.packages("ggfortify")
as
autoplot(gpbypos)
autoplot(wsh$GP, wsh$Position)
